..F...F.                                                                 [100%]
=================================== FAILURES ===================================
_____________________ test_import_glob_alias_and_schedule ______________________

tmp_path = PosixPath('/private/var/folders/zx/k73pwmnx3hq3m_3gpn7g0sn80000gp/T/pytest-of-adanowit/pytest-38/test_import_glob_alias_and_sch0')

    def test_import_glob_alias_and_schedule(tmp_path: Path):
        """home imports std.*; landing_light + wake_hours usable; schedule name normalized to pkg.name."""
        shared = tmp_path / "std" / "shared.hassl"
        landing = tmp_path / "home" / "landing.hassl"
    
        _write(shared, """
    package std.shared
    
    alias landing_light = light.landing_main
    private alias _debug = light.dev_fixture
    
    schedule wake_hours:
      enable from 07:00 to 23:00;
    """)
    
        _write(landing, """
    package home.landing
    import std.shared.*
    
    rule motion_light:
      schedule use wake_hours;
      if (motion && lux < 50)
      then landing_light = on; wait (!motion for 10m) landing_light = off
    """)
    
        # parse both
        p_shared = parse_hassl(shared.read_text()); p_shared.package = "std.shared"
        p_landing = parse_hassl(landing.read_text()); p_landing.package = "home.landing"
    
        # build exports (like cli pass 1)
        sem_analyzer.GLOBAL_EXPORTS = _collect_public_exports(p_shared, "std.shared")
    
        # analyze home
        ir = analyze(p_landing).to_dict()
    
        # schedule use is present (base-name form as emitted by analyzer)
        (rule,) = ir["rules"]
        assert rule["schedule_uses"] == ["wake_hours"]
    
        # actions targets resolved to entity id (alias imported correctly)
        assigns = [a for a in rule["clauses"][0]["actions"] if a["type"] == "assign"]
>       assert {a["target"] for a in assigns} == {"light.landing_main"}
E       AssertionError: assert {'landing_light'} == {'light.landing_main'}
E         
E         Extra items in the left set:
E         'landing_light'
E         Extra items in the right set:
E         'light.landing_main'
E         Use -v to get more diff

tests/test_imports_and_schedules.py:80: AssertionError
__________________ test_cross_package_import_and_codegen_gate __________________

tmp_path = PosixPath('/private/var/folders/zx/k73pwmnx3hq3m_3gpn7g0sn80000gp/T/pytest-of-adanowit/pytest-38/test_cross_package_import_and_0')

    def test_cross_package_import_and_codegen_gate(tmp_path: Path):
        """home uses std.wake_hours; codegen must gate the rule with the package schedule sensor."""
        shared = tmp_path / "std" / "shared.hassl"
        homep = tmp_path / "home" / "landing.hassl"
    
        _write(shared, """
    package std.shared
    alias landing_light = light.landing_main
    schedule wake_hours:
      enable from 07:00 to 23:00;
    """)
        _write(homep, """
    package home.landing
    import std.shared.*
    
    rule motion_light:
      schedule use wake_hours;
      if (motion) then landing_light = on
    """)
    
        # parse + export
        p_shared = parse_hassl(shared.read_text()); p_shared.package = "std.shared"
        sem_analyzer.GLOBAL_EXPORTS = _collect_public_exports(p_shared, "std.shared")
    
        # analyze home
        p_home = parse_hassl(homep.read_text()); p_home.package = "home.landing"
        ir_home = analyze(p_home)
    
        # generate combined YAML for the home package
        outdir = tmp_path / "out_home"
        pkg_codegen.emit_package(ir_home, str(outdir))  # may not create schedules if none declared in this package
        rules_min.generate_rules(ir_home.to_dict(), str(outdir))
    
        pkg_slug = rules_min._pkg_slug(str(outdir))
        bundled = (outdir / f"rules_bundled_{pkg_slug}.yaml").read_text()
        # the ruleâ€™s condition gates on the schedule binary_sensor for *this* package name
>       assert f"binary_sensor.hassl_schedule_{pkg_slug}_wake_hours_active" in bundled
E       assert 'binary_sensor.hassl_schedule_out_home_wake_hours_active' in "automation:\n- id: motion_light__1\n  alias: 'HASSL motion_light #1'\n  mode: restart\n  trigger:\n  - platform: time...     value: '{{ this.context.id }}'\n  - service: homeassistant.turn_on\n    target:\n      entity_id: landing_light\n"

tests/test_imports_and_schedules.py:227: AssertionError
=============================== warnings summary ===============================
../../.pyenv/versions/3.13.2/lib/python3.13/site-packages/lark/utils.py:163
  /Users/adanowit/.pyenv/versions/3.13.2/lib/python3.13/site-packages/lark/utils.py:163: DeprecationWarning: module 'sre_parse' is deprecated
    import sre_parse

../../.pyenv/versions/3.13.2/lib/python3.13/site-packages/lark/utils.py:164
  /Users/adanowit/.pyenv/versions/3.13.2/lib/python3.13/site-packages/lark/utils.py:164: DeprecationWarning: module 'sre_constants' is deprecated
    import sre_constants

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_imports_and_schedules.py::test_import_glob_alias_and_schedule
FAILED tests/test_imports_and_schedules.py::test_cross_package_import_and_codegen_gate
2 failed, 6 passed, 2 warnings in 0.48s
